# TAP results for failure_demo.py
not ok 1 - failure_demo.py::test_generative[0]
# 
# param1 = 3, param2 = 6
# 
#     def test_generative(param1, param2):
# >       assert param1 * 2 < param2
# E       assert (3 * 2) < 6
# 
# failure_demo.py:16: AssertionError
not ok 2 - failure_demo.py::TestFailing.test_simple
# 
# self = <failure_demo.TestFailing object at 0x7fa011d78950>
# 
#     def test_simple(self):
#         def f():
#             return 42
#         def g():
#             return 43
#     
# >       assert f() == g()
# E       assert 42 == 43
# E        +  where 42 = <function f at 0x7fa011d96aa0>()
# E        +  and   43 = <function g at 0x7fa011d96b18>()
# 
# failure_demo.py:29: AssertionError
not ok 3 - failure_demo.py::TestFailing.test_simple_multiline
# 
# self = <failure_demo.TestFailing object at 0x7fa011d9b0d0>
# 
#     def test_simple_multiline(self):
#         otherfunc_multi(
#                   42,
# >                 6*9)
# 
# failure_demo.py:34: 
# _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
# 
# a = 42, b = 54
# 
#     def otherfunc_multi(a,b):
# >       assert (a ==
#                 b)
# E       assert 42 == 54
# 
# failure_demo.py:12: AssertionError
not ok 4 - failure_demo.py::TestFailing.test_not
# 
# self = <failure_demo.TestFailing object at 0x7fa011e9a410>
# 
#     def test_not(self):
#         def f():
#             return 42
# >       assert not f()
# E       assert not 42
# E        +  where 42 = <function f at 0x7fa011d96ed8>()
# 
# failure_demo.py:39: AssertionError
not ok 5 - failure_demo.py::TestSpecialisedExplanations.test_eq_text
# 
# self = <failure_demo.TestSpecialisedExplanations object at 0x7fa011d9bb50>
# 
#     def test_eq_text(self):
# >       assert 'spam' == 'eggs'
# E       AssertionError: assert 'spam' == 'eggs'
# E         - spam
# E         + eggs
# 
# failure_demo.py:43: AssertionError
not ok 6 - failure_demo.py::TestSpecialisedExplanations.test_eq_similar_text
# 
# self = <failure_demo.TestSpecialisedExplanations object at 0x7fa013103710>
# 
#     def test_eq_similar_text(self):
# >       assert 'foo 1 bar' == 'foo 2 bar'
# E       AssertionError: assert 'foo 1 bar' == 'foo 2 bar'
# E         - foo 1 bar
# E         ?     ^
# E         + foo 2 bar
# E         ?     ^
# 
# failure_demo.py:46: AssertionError
not ok 7 - failure_demo.py::TestSpecialisedExplanations.test_eq_multiline_text
# 
# self = <failure_demo.TestSpecialisedExplanations object at 0x7fa011edc290>
# 
#     def test_eq_multiline_text(self):
# >       assert 'foo\nspam\nbar' == 'foo\neggs\nbar'
# E       AssertionError: assert 'foo\nspam\nbar' == 'foo\neggs\nbar'
# E           foo
# E         - spam
# E         + eggs
# E           bar
# 
# failure_demo.py:49: AssertionError
not ok 8 - failure_demo.py::TestSpecialisedExplanations.test_eq_long_text
# 
# self = <failure_demo.TestSpecialisedExplanations object at 0x7fa013103810>
# 
#     def test_eq_long_text(self):
#         a = '1'*100 + 'a' + '2'*100
#         b = '1'*100 + 'b' + '2'*100
# >       assert a == b
# E       AssertionError: assert '111111111111...2222222222222' == '1111111111111...2222222222222'
# E         Skipping 90 identical leading characters in diff, use -v to show
# E         Skipping 91 identical trailing characters in diff, use -v to show
# E         - 1111111111a222222222
# E         ?           ^
# E         + 1111111111b222222222
# E         ?           ^
# 
# failure_demo.py:54: AssertionError
not ok 9 - failure_demo.py::TestSpecialisedExplanations.test_eq_long_text_multiline
# 
# self = <failure_demo.TestSpecialisedExplanations object at 0x7fa011ed14d0>
# 
#     def test_eq_long_text_multiline(self):
#         a = '1\n'*100 + 'a' + '2\n'*100
#         b = '1\n'*100 + 'b' + '2\n'*100
# >       assert a == b
# E       AssertionError: assert '1\n1\n1\n1\n...n2\n2\n2\n2\n' == '1\n1\n1\n1\n1...n2\n2\n2\n2\n'
# E         Skipping 190 identical leading characters in diff, use -v to show
# E         Skipping 191 identical trailing characters in diff, use -v to show
# E           1
# E           1
# E           1
# E           1
# E           1...
# E         
# E         ...Full output truncated (7 lines hidden), use '-vv' to show
# 
# failure_demo.py:59: AssertionError
not ok 10 - failure_demo.py::TestSpecialisedExplanations.test_eq_list
# 
# self = <failure_demo.TestSpecialisedExplanations object at 0x7fa011fc7110>
# 
#     def test_eq_list(self):
# >       assert [0, 1, 2] == [0, 1, 3]
# E       assert [0, 1, 2] == [0, 1, 3]
# E         At index 2 diff: 2 != 3
# E         Use -v to get the full diff
# 
# failure_demo.py:62: AssertionError
not ok 11 - failure_demo.py::TestSpecialisedExplanations.test_eq_list_long
# 
# self = <failure_demo.TestSpecialisedExplanations object at 0x7fa011fc7bd0>
# 
#     def test_eq_list_long(self):
#         a = [0]*100 + [1] + [3]*100
#         b = [0]*100 + [2] + [3]*100
# >       assert a == b
# E       assert [0, 0, 0, 0, 0, 0, ...] == [0, 0, 0, 0, 0, 0, ...]
# E         At index 100 diff: 1 != 2
# E         Use -v to get the full diff
# 
# failure_demo.py:67: AssertionError
not ok 12 - failure_demo.py::TestSpecialisedExplanations.test_eq_dict
# 
# self = <failure_demo.TestSpecialisedExplanations object at 0x7fa011fd62d0>
# 
#     def test_eq_dict(self):
# >       assert {'a': 0, 'b': 1, 'c': 0} == {'a': 0, 'b': 2, 'd': 0}
# E       AssertionError: assert {'a': 0, 'b': 1, 'c': 0} == {'a': 0, 'b': 2, 'd': 0}
# E         Omitting 1 identical items, use -vv to show
# E         Differing items:
# E         {'b': 1} != {'b': 2}
# E         Left contains more items:
# E         {'c': 0}
# E         Right contains more items:
# E         {'d': 0}...
# E         
# E         ...Full output truncated (2 lines hidden), use '-vv' to show
# 
# failure_demo.py:70: AssertionError
not ok 13 - failure_demo.py::TestSpecialisedExplanations.test_eq_set
# 
# self = <failure_demo.TestSpecialisedExplanations object at 0x7fa011fc8190>
# 
#     def test_eq_set(self):
# >       assert set([0, 10, 11, 12]) == set([0, 20, 21])
# E       AssertionError: assert set([0, 10, 11, 12]) == set([0, 20, 21])
# E         Extra items in the left set:
# E         10
# E         11
# E         12
# E         Extra items in the right set:
# E         20
# E         21...
# E         
# E         ...Full output truncated (2 lines hidden), use '-vv' to show
# 
# failure_demo.py:73: AssertionError
not ok 14 - failure_demo.py::TestSpecialisedExplanations.test_eq_longer_list
# 
# self = <failure_demo.TestSpecialisedExplanations object at 0x7fa011e7e9d0>
# 
#     def test_eq_longer_list(self):
# >       assert [1,2] == [1,2,3]
# E       assert [1, 2] == [1, 2, 3]
# E         Right contains more items, first extra item: 3
# E         Use -v to get the full diff
# 
# failure_demo.py:76: AssertionError
not ok 15 - failure_demo.py::TestSpecialisedExplanations.test_in_list
# 
# self = <failure_demo.TestSpecialisedExplanations object at 0x7fa011e7e4d0>
# 
#     def test_in_list(self):
# >       assert 1 in [0, 2, 3, 4, 5]
# E       assert 1 in [0, 2, 3, 4, 5]
# 
# failure_demo.py:79: AssertionError
not ok 16 - failure_demo.py::TestSpecialisedExplanations.test_not_in_text_multiline
# 
# self = <failure_demo.TestSpecialisedExplanations object at 0x7fa011e66590>
# 
#     def test_not_in_text_multiline(self):
#         text = 'some multiline\ntext\nwhich\nincludes foo\nand a\ntail'
# >       assert 'foo' not in text
# E       AssertionError: assert 'foo' not in 'some multiline\ntext\nw...ncludes foo\nand a\ntail'
# E         'foo' is contained here:
# E           some multiline
# E           text
# E           which
# E           includes foo
# E         ?          +++
# E           and a...
# E         
# E         ...Full output truncated (2 lines hidden), use '-vv' to show
# 
# failure_demo.py:83: AssertionError
not ok 17 - failure_demo.py::TestSpecialisedExplanations.test_not_in_text_single
# 
# self = <failure_demo.TestSpecialisedExplanations object at 0x7fa011ed8cd0>
# 
#     def test_not_in_text_single(self):
#         text = 'single foo line'
# >       assert 'foo' not in text
# E       AssertionError: assert 'foo' not in 'single foo line'
# E         'foo' is contained here:
# E           single foo line
# E         ?        +++
# 
# failure_demo.py:87: AssertionError
not ok 18 - failure_demo.py::TestSpecialisedExplanations.test_not_in_text_single_long
# 
# self = <failure_demo.TestSpecialisedExplanations object at 0x7fa011ed8890>
# 
#     def test_not_in_text_single_long(self):
#         text = 'head ' * 50 + 'foo ' + 'tail ' * 20
# >       assert 'foo' not in text
# E       AssertionError: assert 'foo' not in 'head head head head hea...ail tail tail tail tail '
# E         'foo' is contained here:
# E           head head foo tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail 
# E         ?           +++
# 
# failure_demo.py:91: AssertionError
not ok 19 - failure_demo.py::TestSpecialisedExplanations.test_not_in_text_single_long_term
# 
# self = <failure_demo.TestSpecialisedExplanations object at 0x7fa011ea4690>
# 
#     def test_not_in_text_single_long_term(self):
#         text = 'head ' * 50 + 'f'*70 + 'tail ' * 20
# >       assert 'f'*70 not in text
# E       AssertionError: assert 'fffffffffff...ffffffffffff' not in 'head head he...l tail tail '
# E         'ffffffffffffffffff...fffffffffffffffffff' is contained here:
# E           head head fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffftail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail tail 
# E         ?           ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
# 
# failure_demo.py:95: AssertionError
not ok 20 - failure_demo.py::test_attribute
# 
#     def test_attribute():
#         class Foo(object):
#             b = 1
#         i = Foo()
# >       assert i.b == 2
# E       assert 1 == 2
# E        +  where 1 = <failure_demo.Foo object at 0x7fa011ecb0d0>.b
# 
# failure_demo.py:102: AssertionError
not ok 21 - failure_demo.py::test_attribute_instance
# 
#     def test_attribute_instance():
#         class Foo(object):
#             b = 1
# >       assert Foo().b == 2
# E       AssertionError: assert 1 == 2
# E        +  where 1 = <failure_demo.Foo object at 0x7fa011e451d0>.b
# E        +    where <failure_demo.Foo object at 0x7fa011e451d0> = <class 'failure_demo.Foo'>()
# 
# failure_demo.py:108: AssertionError
not ok 22 - failure_demo.py::test_attribute_failure
# 
#     def test_attribute_failure():
#         class Foo(object):
#             def _get_b(self):
#                 raise Exception('Failed to get attrib')
#             b = property(_get_b)
#         i = Foo()
# >       assert i.b == 2
# 
# failure_demo.py:117: 
# _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
# 
# self = <failure_demo.Foo object at 0x7fa011e45cd0>
# 
#     def _get_b(self):
# >       raise Exception('Failed to get attrib')
# E       Exception: Failed to get attrib
# 
# failure_demo.py:114: Exception
not ok 23 - failure_demo.py::test_attribute_multiple
# 
#     def test_attribute_multiple():
#         class Foo(object):
#             b = 1
#         class Bar(object):
#             b = 2
# >       assert Foo().b == Bar().b
# E       AssertionError: assert 1 == 2
# E        +  where 1 = <failure_demo.Foo object at 0x7fa0130f8390>.b
# E        +    where <failure_demo.Foo object at 0x7fa0130f8390> = <class 'failure_demo.Foo'>()
# E        +  and   2 = <failure_demo.Bar object at 0x7fa011e35510>.b
# E        +    where <failure_demo.Bar object at 0x7fa011e35510> = <class 'failure_demo.Bar'>()
# 
# failure_demo.py:125: AssertionError
not ok 24 - failure_demo.py::TestRaises.test_raises
# 
# self = <failure_demo.TestRaises object at 0x7fa011f6fc50>
# 
#     def test_raises(self):
#         s = 'qwe'
# >       raises(TypeError, "int(s)")
# 
# failure_demo.py:134: 
# _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
# 
# >   int(s)
# E   ValueError: invalid literal for int() with base 10: 'qwe'
# 
# <0-codegen /home/sergeyb/Downloads/pytest/pip/local/lib/python2.7/site-packages/_pytest/python_api.py:609>:1: ValueError
not ok 25 - failure_demo.py::TestRaises.test_raises_doesnt
# 
# self = <failure_demo.TestRaises object at 0x7fa011f6f910>
# 
#     def test_raises_doesnt(self):
# >       raises(IOError, "int('3')")
# E       Failed: DID NOT RAISE <type 'exceptions.IOError'>
# 
# failure_demo.py:137: Failed
not ok 26 - failure_demo.py::TestRaises.test_raise
# 
# self = <failure_demo.TestRaises object at 0x7fa011fa0f50>
# 
#     def test_raise(self):
# >       raise ValueError("demo error")
# E       ValueError: demo error
# 
# failure_demo.py:140: ValueError
not ok 27 - failure_demo.py::TestRaises.test_tupleerror
# 
# self = <failure_demo.TestRaises object at 0x7fa011f6a110>
# 
#     def test_tupleerror(self):
# >       a,b = [1]
# E       ValueError: need more than 1 value to unpack
# 
# failure_demo.py:143: ValueError
not ok 28 - failure_demo.py::TestRaises.test_reinterpret_fails_with_print_for_the_fun_of_it
# 
# self = <failure_demo.TestRaises object at 0x7fa011f868d0>
# 
#     def test_reinterpret_fails_with_print_for_the_fun_of_it(self):
#         l = [1,2,3]
#         print ("l is %r" % l)
# >       a,b = l.pop()
# E       TypeError: 'int' object is not iterable
# 
# failure_demo.py:148: TypeError
not ok 29 - failure_demo.py::TestRaises.test_some_error
# 
# self = <failure_demo.TestRaises object at 0x7fa011f86350>
# 
#     def test_some_error(self):
# >       if namenotexi:
# E       NameError: global name 'namenotexi' is not defined
# 
# failure_demo.py:151: NameError
not ok 30 - failure_demo.py::test_dynamic_compile_shows_nicely
# 
#     def test_dynamic_compile_shows_nicely():
#         import imp
#         import sys
#         src = 'def foo():\n assert 1 == 0\n'
#         name = 'abc-123'
#         module = imp.new_module(name)
#         code = _pytest._code.compile(src, name, 'exec')
#         py.builtin.exec_(code, module.__dict__)
#         sys.modules[name] = module
# >       module.foo()
# 
# failure_demo.py:168: 
# _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
# 
#     def foo():
# >    assert 1 == 0
# E    AssertionError
# 
# <2-codegen 'abc-123' /tmp/pytest-of-sergeyb/pytest-28/test_failure_demo_fails_properly0/failure_demo.py:165>:2: AssertionError
not ok 31 - failure_demo.py::TestMoreErrors.test_complex_error
# 
# self = <failure_demo.TestMoreErrors object at 0x7fa011eecad0>
# 
#     def test_complex_error(self):
#         def f():
#             return 44
#         def g():
#             return 43
# >       somefunc(f(), g())
# 
# failure_demo.py:178: 
# _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
# failure_demo.py:9: in somefunc
#     otherfunc(x,y)
# _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
# 
# a = 44, b = 43
# 
#     def otherfunc(a,b):
# >       assert a==b
# E       assert 44 == 43
# 
# failure_demo.py:6: AssertionError
not ok 32 - failure_demo.py::TestMoreErrors.test_z1_unpack_error
# 
# self = <failure_demo.TestMoreErrors object at 0x7fa011e1d850>
# 
#     def test_z1_unpack_error(self):
#         l = []
# >       a,b  = l
# E       ValueError: need more than 0 values to unpack
# 
# failure_demo.py:182: ValueError
not ok 33 - failure_demo.py::TestMoreErrors.test_z2_type_error
# 
# self = <failure_demo.TestMoreErrors object at 0x7fa011e1d110>
# 
#     def test_z2_type_error(self):
#         l = 3
# >       a,b  = l
# E       TypeError: 'int' object is not iterable
# 
# failure_demo.py:186: TypeError
not ok 34 - failure_demo.py::TestMoreErrors.test_startswith
# 
# self = <failure_demo.TestMoreErrors object at 0x7fa011e00290>
# 
#     def test_startswith(self):
#         s = "123"
#         g = "456"
# >       assert s.startswith(g)
# E       AssertionError: assert False
# E        +  where False = <built-in method startswith of str object at 0x7fa01316ce40>('456')
# E        +    where <built-in method startswith of str object at 0x7fa01316ce40> = '123'.startswith
# 
# failure_demo.py:191: AssertionError
not ok 35 - failure_demo.py::TestMoreErrors.test_startswith_nested
# 
# self = <failure_demo.TestMoreErrors object at 0x7fa011e068d0>
# 
#     def test_startswith_nested(self):
#         def f():
#             return "123"
#         def g():
#             return "456"
# >       assert f().startswith(g())
# E       AssertionError: assert False
# E        +  where False = <built-in method startswith of str object at 0x7fa01316ce40>('456')
# E        +    where <built-in method startswith of str object at 0x7fa01316ce40> = '123'.startswith
# E        +      where '123' = <function f at 0x7fa011efacf8>()
# E        +    and   '456' = <function g at 0x7fa011efaed8>()
# 
# failure_demo.py:198: AssertionError
not ok 36 - failure_demo.py::TestMoreErrors.test_global_func
# 
# self = <failure_demo.TestMoreErrors object at 0x7fa011e063d0>
# 
#     def test_global_func(self):
# >       assert isinstance(globf(42), float)
# E       assert False
# E        +  where False = isinstance(43, float)
# E        +    where 43 = globf(42)
# 
# failure_demo.py:201: AssertionError
not ok 37 - failure_demo.py::TestMoreErrors.test_instance
# 
# self = <failure_demo.TestMoreErrors object at 0x7fa011df11d0>
# 
#     def test_instance(self):
#         self.x = 6*7
# >       assert self.x != 42
# E       assert 42 != 42
# E        +  where 42 = <failure_demo.TestMoreErrors object at 0x7fa011df11d0>.x
# 
# failure_demo.py:205: AssertionError
not ok 38 - failure_demo.py::TestMoreErrors.test_compare
# 
# self = <failure_demo.TestMoreErrors object at 0x7fa011f2ba10>
# 
#     def test_compare(self):
# >       assert globf(10) < 5
# E       assert 11 < 5
# E        +  where 11 = globf(10)
# 
# failure_demo.py:208: AssertionError
not ok 39 - failure_demo.py::TestMoreErrors.test_try_finally
# 
# self = <failure_demo.TestMoreErrors object at 0x7fa011f2b550>
# 
#     def test_try_finally(self):
#         x = 1
#         try:
# >           assert x == 0
# E           assert 1 == 0
# 
# failure_demo.py:213: AssertionError
not ok 40 - failure_demo.py::TestCustomAssertMsg.test_single_line
# 
# self = <failure_demo.TestCustomAssertMsg object at 0x7fa011f366d0>
# 
#     def test_single_line(self):
#         class A(object):
#             a = 1
#         b = 2
# >       assert A.a == b, "A.a appears not to be b"
# E       AssertionError: A.a appears not to be b
# E       assert 1 == 2
# E        +  where 1 = <class 'failure_demo.A'>.a
# 
# failure_demo.py:224: AssertionError
not ok 41 - failure_demo.py::TestCustomAssertMsg.test_multiline
# 
# self = <failure_demo.TestCustomAssertMsg object at 0x7fa011f55dd0>
# 
#     def test_multiline(self):
#         class A(object):
#             a = 1
#         b = 2
# >       assert A.a == b, "A.a appears not to be b\n" \
#             "or does not appear to be b\none of those"
# E       AssertionError: A.a appears not to be b
# E         or does not appear to be b
# E         one of those
# E       assert 1 == 2
# E        +  where 1 = <class 'failure_demo.A'>.a
# 
# failure_demo.py:230: AssertionError
not ok 42 - failure_demo.py::TestCustomAssertMsg.test_custom_repr
# 
# self = <failure_demo.TestCustomAssertMsg object at 0x7fa011f55a50>
# 
#     def test_custom_repr(self):
#         class JSON(object):
#             a = 1
#             def __repr__(self):
#                 return "This is JSON\n{\n  'foo': 'bar'\n}"
#         a = JSON()
#         b = 2
# >       assert a.a == b, a
# E       AssertionError: This is JSON
# E         {
# E           'foo': 'bar'
# E         }
# E       assert 1 == 2
# E        +  where 1 = This is JSON\n{\n  'foo': 'bar'\n}.a
# 
# failure_demo.py:240: AssertionError
1..42
