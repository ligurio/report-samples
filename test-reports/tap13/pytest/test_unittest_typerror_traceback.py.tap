# TAP results for test_unittest_typerror_traceback.py
not ok 1 - test_unittest_typerror_traceback.py::TestJoinEmpty.test_hello
# 
# self = <test_unittest_typerror_traceback.TestJoinEmpty testMethod=test_hello>
# result = <TestCaseFunction 'test_hello'>
# 
#     def run(self, result=None):
#         orig_result = result
#         if result is None:
#             result = self.defaultTestResult()
#             startTestRun = getattr(result, 'startTestRun', None)
#             if startTestRun is not None:
#                 startTestRun()
#     
#         self._resultForDoCleanups = result
#         result.startTest(self)
#     
#         testMethod = getattr(self, self._testMethodName)
#         if (getattr(self.__class__, "__unittest_skip__", False) or
#             getattr(testMethod, "__unittest_skip__", False)):
#             # If the class or method was skipped.
#             try:
#                 skip_why = (getattr(self.__class__, '__unittest_skip_why__', '')
#                             or getattr(testMethod, '__unittest_skip_why__', ''))
#                 self._addSkip(result, skip_why)
#             finally:
#                 result.stopTest(self)
#             return
#         try:
#             success = False
#             try:
#                 self.setUp()
#             except SkipTest as e:
#                 self._addSkip(result, str(e))
#             except KeyboardInterrupt:
#                 raise
#             except:
#                 result.addError(self, sys.exc_info())
#             else:
#                 try:
# >                   testMethod()
# E                   TypeError: test_hello() takes exactly 2 arguments (1 given)
# 
# /usr/lib/python2.7/unittest/case.py:329: TypeError
1..1
